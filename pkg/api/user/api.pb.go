// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pkg/api/user/api.proto

package user

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type User struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *User) Reset()         { *m = User{} }
func (m *User) String() string { return proto.CompactTextString(m) }
func (*User) ProtoMessage()    {}
func (*User) Descriptor() ([]byte, []int) {
	return fileDescriptor_de1e0d3bf8cb5a8f, []int{0}
}

func (m *User) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_User.Unmarshal(m, b)
}
func (m *User) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_User.Marshal(b, m, deterministic)
}
func (m *User) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User.Merge(m, src)
}
func (m *User) XXX_Size() int {
	return xxx_messageInfo_User.Size(m)
}
func (m *User) XXX_DiscardUnknown() {
	xxx_messageInfo_User.DiscardUnknown(m)
}

var xxx_messageInfo_User proto.InternalMessageInfo

func (m *User) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *User) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type AddUserRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddUserRequest) Reset()         { *m = AddUserRequest{} }
func (m *AddUserRequest) String() string { return proto.CompactTextString(m) }
func (*AddUserRequest) ProtoMessage()    {}
func (*AddUserRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_de1e0d3bf8cb5a8f, []int{1}
}

func (m *AddUserRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddUserRequest.Unmarshal(m, b)
}
func (m *AddUserRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddUserRequest.Marshal(b, m, deterministic)
}
func (m *AddUserRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddUserRequest.Merge(m, src)
}
func (m *AddUserRequest) XXX_Size() int {
	return xxx_messageInfo_AddUserRequest.Size(m)
}
func (m *AddUserRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddUserRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddUserRequest proto.InternalMessageInfo

func (m *AddUserRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type FindUserByIdRequest struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FindUserByIdRequest) Reset()         { *m = FindUserByIdRequest{} }
func (m *FindUserByIdRequest) String() string { return proto.CompactTextString(m) }
func (*FindUserByIdRequest) ProtoMessage()    {}
func (*FindUserByIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_de1e0d3bf8cb5a8f, []int{2}
}

func (m *FindUserByIdRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindUserByIdRequest.Unmarshal(m, b)
}
func (m *FindUserByIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindUserByIdRequest.Marshal(b, m, deterministic)
}
func (m *FindUserByIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindUserByIdRequest.Merge(m, src)
}
func (m *FindUserByIdRequest) XXX_Size() int {
	return xxx_messageInfo_FindUserByIdRequest.Size(m)
}
func (m *FindUserByIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FindUserByIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FindUserByIdRequest proto.InternalMessageInfo

func (m *FindUserByIdRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type FindUserByNameRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FindUserByNameRequest) Reset()         { *m = FindUserByNameRequest{} }
func (m *FindUserByNameRequest) String() string { return proto.CompactTextString(m) }
func (*FindUserByNameRequest) ProtoMessage()    {}
func (*FindUserByNameRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_de1e0d3bf8cb5a8f, []int{3}
}

func (m *FindUserByNameRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindUserByNameRequest.Unmarshal(m, b)
}
func (m *FindUserByNameRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindUserByNameRequest.Marshal(b, m, deterministic)
}
func (m *FindUserByNameRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindUserByNameRequest.Merge(m, src)
}
func (m *FindUserByNameRequest) XXX_Size() int {
	return xxx_messageInfo_FindUserByNameRequest.Size(m)
}
func (m *FindUserByNameRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FindUserByNameRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FindUserByNameRequest proto.InternalMessageInfo

func (m *FindUserByNameRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Users struct {
	Users                []*User  `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Users) Reset()         { *m = Users{} }
func (m *Users) String() string { return proto.CompactTextString(m) }
func (*Users) ProtoMessage()    {}
func (*Users) Descriptor() ([]byte, []int) {
	return fileDescriptor_de1e0d3bf8cb5a8f, []int{4}
}

func (m *Users) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Users.Unmarshal(m, b)
}
func (m *Users) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Users.Marshal(b, m, deterministic)
}
func (m *Users) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Users.Merge(m, src)
}
func (m *Users) XXX_Size() int {
	return xxx_messageInfo_Users.Size(m)
}
func (m *Users) XXX_DiscardUnknown() {
	xxx_messageInfo_Users.DiscardUnknown(m)
}

var xxx_messageInfo_Users proto.InternalMessageInfo

func (m *Users) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

func init() {
	proto.RegisterType((*User)(nil), "user.User")
	proto.RegisterType((*AddUserRequest)(nil), "user.AddUserRequest")
	proto.RegisterType((*FindUserByIdRequest)(nil), "user.FindUserByIdRequest")
	proto.RegisterType((*FindUserByNameRequest)(nil), "user.FindUserByNameRequest")
	proto.RegisterType((*Users)(nil), "user.Users")
}

func init() { proto.RegisterFile("pkg/api/user/api.proto", fileDescriptor_de1e0d3bf8cb5a8f) }

var fileDescriptor_de1e0d3bf8cb5a8f = []byte{
	// 284 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0x41, 0x4b, 0xc3, 0x40,
	0x10, 0x85, 0xdd, 0x34, 0x6d, 0xe9, 0x54, 0x72, 0x18, 0xb5, 0xc4, 0xf6, 0x12, 0x82, 0x42, 0x54,
	0xd8, 0x40, 0xbc, 0x78, 0xf0, 0x62, 0x41, 0x41, 0x10, 0x0f, 0x11, 0x2f, 0xde, 0x52, 0x33, 0x86,
	0x45, 0xd3, 0xc4, 0x6c, 0x22, 0xf4, 0x07, 0xfb, 0x3f, 0x64, 0x77, 0xad, 0x4d, 0x83, 0xf4, 0x36,
	0x93, 0xf9, 0x5e, 0xf6, 0x3d, 0x1e, 0x4c, 0xca, 0xf7, 0x2c, 0x4c, 0x4a, 0x11, 0x36, 0x92, 0x2a,
	0x35, 0xf0, 0xb2, 0x2a, 0xea, 0x02, 0x6d, 0xb5, 0x4f, 0x67, 0x59, 0x51, 0x64, 0x1f, 0x14, 0xea,
	0x6f, 0x8b, 0xe6, 0x2d, 0xa4, 0xbc, 0xac, 0x57, 0x06, 0xf1, 0xcf, 0xc1, 0x7e, 0x96, 0x54, 0xa1,
	0x03, 0x96, 0x48, 0x5d, 0xe6, 0xb1, 0xa0, 0x17, 0x5b, 0x22, 0x45, 0x04, 0x7b, 0x99, 0xe4, 0xe4,
	0x5a, 0x1e, 0x0b, 0x46, 0xb1, 0x9e, 0xfd, 0x13, 0x70, 0x6e, 0xd2, 0x54, 0xe1, 0x31, 0x7d, 0x36,
	0x24, 0xeb, 0x3f, 0x8a, 0xb5, 0xa8, 0x53, 0x38, 0xb8, 0x13, 0x4b, 0x8d, 0xcd, 0x57, 0xf7, 0xe9,
	0x1a, 0xed, 0x3c, 0xe0, 0x5f, 0xc0, 0xd1, 0x06, 0x7b, 0x4c, 0x72, 0xda, 0xf5, 0xcf, 0x33, 0xe8,
	0x2b, 0x50, 0xa2, 0x07, 0x7d, 0x95, 0x49, 0xba, 0xcc, 0xeb, 0x05, 0xe3, 0x08, 0xb8, 0xda, 0xb8,
	0xb6, 0x64, 0x0e, 0xd1, 0x37, 0x83, 0xe1, 0x13, 0x55, 0x5f, 0xe2, 0x95, 0x90, 0xc3, 0xf0, 0xd7,
	0x30, 0x1e, 0x1a, 0x72, 0xdb, 0xff, 0x74, 0xbc, 0xd1, 0x4b, 0x7f, 0x0f, 0xaf, 0x60, 0xbf, 0x6d,
	0x1d, 0x8f, 0xcd, 0xf9, 0x9f, 0x38, 0x5d, 0xe5, 0x35, 0x38, 0xdb, 0x69, 0x70, 0xd6, 0xd5, 0xb6,
	0x32, 0x76, 0xd5, 0x11, 0x8c, 0x1e, 0x84, 0xac, 0x4d, 0xc4, 0x09, 0x37, 0x7d, 0xf1, 0x75, 0x5f,
	0xfc, 0x56, 0xf5, 0xd5, 0xd1, 0xcc, 0x07, 0x2f, 0xba, 0xdd, 0xc5, 0x40, 0x63, 0x97, 0x3f, 0x01,
	0x00, 0x00, 0xff, 0xff, 0xf1, 0xd8, 0x7e, 0x2f, 0x04, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ServiceClient is the client API for Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ServiceClient interface {
	AddUser(ctx context.Context, in *AddUserRequest, opts ...grpc.CallOption) (*Users, error)
	FindUserById(ctx context.Context, in *FindUserByIdRequest, opts ...grpc.CallOption) (*Users, error)
	FindUserByName(ctx context.Context, in *FindUserByNameRequest, opts ...grpc.CallOption) (*Users, error)
	ListUsers(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Users, error)
}

type serviceClient struct {
	cc *grpc.ClientConn
}

func NewServiceClient(cc *grpc.ClientConn) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) AddUser(ctx context.Context, in *AddUserRequest, opts ...grpc.CallOption) (*Users, error) {
	out := new(Users)
	err := c.cc.Invoke(ctx, "/user.Service/AddUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) FindUserById(ctx context.Context, in *FindUserByIdRequest, opts ...grpc.CallOption) (*Users, error) {
	out := new(Users)
	err := c.cc.Invoke(ctx, "/user.Service/FindUserById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) FindUserByName(ctx context.Context, in *FindUserByNameRequest, opts ...grpc.CallOption) (*Users, error) {
	out := new(Users)
	err := c.cc.Invoke(ctx, "/user.Service/FindUserByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ListUsers(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Users, error) {
	out := new(Users)
	err := c.cc.Invoke(ctx, "/user.Service/ListUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceServer is the server API for Service service.
type ServiceServer interface {
	AddUser(context.Context, *AddUserRequest) (*Users, error)
	FindUserById(context.Context, *FindUserByIdRequest) (*Users, error)
	FindUserByName(context.Context, *FindUserByNameRequest) (*Users, error)
	ListUsers(context.Context, *empty.Empty) (*Users, error)
}

func RegisterServiceServer(s *grpc.Server, srv ServiceServer) {
	s.RegisterService(&_Service_serviceDesc, srv)
}

func _Service_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.Service/AddUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).AddUser(ctx, req.(*AddUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_FindUserById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindUserByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).FindUserById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.Service/FindUserById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).FindUserById(ctx, req.(*FindUserByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_FindUserByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindUserByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).FindUserByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.Service/FindUserByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).FindUserByName(ctx, req.(*FindUserByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.Service/ListUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).ListUsers(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Service_serviceDesc = grpc.ServiceDesc{
	ServiceName: "user.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddUser",
			Handler:    _Service_AddUser_Handler,
		},
		{
			MethodName: "FindUserById",
			Handler:    _Service_FindUserById_Handler,
		},
		{
			MethodName: "FindUserByName",
			Handler:    _Service_FindUserByName_Handler,
		},
		{
			MethodName: "ListUsers",
			Handler:    _Service_ListUsers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/api/user/api.proto",
}
